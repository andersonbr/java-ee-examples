#group: edge
#dist: trusty
#group: deprecated-2017Q4

sudo: required
group: travis_lts

env:
  global:
    TERM=dumb

language: java
jdk:
  - openjdk8
  - oraclejdk8

install: true
before_install:
  # install latest docker
  - sudo apt remove docker docker-engine docker.io
  - sudo apt update
  - >
    sudo apt install -y \
        linux-image-extra-$(uname -r) \
        linux-image-extra-virtual
  - >
    sudo apt install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        software-properties-common

  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo apt-key fingerprint 0EBFCD88
  - >
    sudo add-apt-repository \
       "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
       $(lsb_release -cs) \
       stable"

  - sudo apt update -y
  - sudo apt install -y docker-ce
  - sudo apt-cache madison docker-ce

  # docker-compose, curl, jq and httpie
  - sudo apt install -y docker python-pip jq curl libxml2-utils
  - sudo pip install docker-compose httpie
  - sudo usermod -aG docker $(whoami)

  - source <(curl -s https://raw.githubusercontent.com/daggerok/bash-functions/master/main.bash)

  # kill whatever ports is running
  - stop_any 5432 5672 27017 8080

  - docker -v
  - docker-compose -v

script:
  - bash gradlew clean build docs

  - export parent=$(pwd)

  - cd $parent/tomee-ext.js
  - bash mvnw clean package -U -T 4
  - stop_any 8080
  - docker-compose up -d --build --force-recreate --remove-orphans
  - sleep 30
  - http :8080/ui/
  - http :8080/rest-api/health
  - docker-compose down -v

  - cd $parent/glassfish-ext.js
  - bash mvnw clean package -U -T 4
  - stop_any 8080
  - docker-compose up -d --build --force-recreate --remove-orphans
  - sleep 30
  - http :8080/ui/
  - http :8080/rest-api/health
  - docker-compose down -v

  - cd $parent/forge-javaee-6-ws
  - bash mvnw clean package -U -T 2
  - docker-compose up --build --force-recreate --remove-orphans -d
  - sleep 20
  - http :8080/app/health
  - http :8080/app/AppEndpoint\?wsdl
  - curl -XPOST http://localhost:8080/app/AppEndpoint --header "content-type:text/xml" -d @request.xml | xmllint --format -
  - docker-compose down -v

  - cd $parent/forge-ws
  - bash mvnw clean package -U
  - bash gradlew clean build
  - docker-compose up --build --force-recreate --remove-orphans -d
  - sleep 20
  - http :8080/app/v1/api
  - http ":8080/app/UserService?wsdl"
  - curl -XPOST http://localhost:8080/app/User --header "content-type:text/xml" -d @./src/test/resources/empty-request.xml | xmllint --format -
  - curl -XPOST http://localhost:8080/app/User --header "content-type:text/xml" -d @src/test/resources/named-request.xml | xmllint --format -
  - docker-compose down -v

  - cd $parent/java-ee-7-docker-jboss-eap-6.4-quickstart
  - bash mvnw -U
  - docker-compose up -d --build
  - sleep 20
  - curl -sS localhost:8080/app/
  - docker-compose down -v

  - cd $parent/kumuluzee-mp-2.0-jax-ws
  - bash mvnw clean package -U -T 4
  - java -jar ./target/*.jar &
  - wait_for 8000
  - http :8000/
  - http :8000/api/v1/ws
  - http :8000/api/v1/ws\?wsdl
  - curl -XPOST http://localhost:8000/api/v1/ws --header "content-type:text/xml" -d @./request.xml | xmllint --format -
  - stop_any 8000
  - docker-compose up -d --build --force-recreate --remove-orphans
  - sleep 15
  - curl -sS localhost:8000 | jq
  - curl -sS localhost:8000/api/v1/ws | xmllint --format -
  - curl -sS "localhost:8000/api/v1/ws?WSDL" | xmllint --format -
  - curl -XPOST http://localhost:8000/api/v1/ws --header "content-type:text/xml" -d @./request.xml | xmllint --format -
  - curl -XPOST http://localhost:8000/api/v1/ws --header "content-type:text/xml" -d @./request.xml | xmllint --format - | grep id
  - curl -XPOST http://localhost:8000/api/v1/ws --header "content-type:text/xml" -d @./request.xml | xmllint --format - | grep id
  - curl -XPOST http://localhost:8000/api/v1/ws --header "content-type:text/xml" -d @./request.xml | xmllint --format - | grep id
  - docker-compose down -v

  - cd $parent/kumuluzee-microprofile-1.0
  - bash mvnw clean install
  - docker-compose up -d --build
  - sleep 15
  - http :8080/
  - docker-compose down -v

  - cd $parent/jboss-eap-ext.js
  - bash mvnw clean package -U -T 4
  - stop_any 8080
  - docker-compose up -d --build --force-recreate --remove-orphans
  - sleep 30
  - http :8080/ui/
  - http :8080/rest-api/health
  - docker-compose down -v

  - cd $parent/kotlin-java-ee-payara-docker
  - bash gradlew clean war
  - stop_any 8080
  - docker-compose up --force-recreate -d --build --remove-orphans
  - sleep 30
  - http :8080/payara-app/
  - http :8080/payara-app/max
  - docker-compose down -v

  - cd $parent/main-swarm-rest-api
  - bash mvnw clean package
  - docker-compose up --force-recreate -d --build --remove-orphans
  - sleep 30
  - http :8080
  - http :8080/api
  - http :8080/api/max
  - echo '{"users":{"username":"Max"}}' | http :8080/api/jsonp/json-pointer
  - http post :8080/api/cors max=max
  - docker-compose down -v

  - cd $parent/main-swarm-static-content
  - bash gradlew clean build
  - docker-compose up --force-recreate -d --build --remove-orphans
  - sleep 30
  - http :8080
  - docker-compose down -v

  - cd $parent/kotlin-plugins-java-ee
  - bash gradlew clean build
  - docker-compose up --force-recreate -d --build --remove-orphans
  - sleep 30
  - http :8080
  - http :8080/hi
  - http :8080/max
  - docker-compose down -v

  - cd $parent/kotlin-java-ee
  - bash gradlew clean build
  - java -Djava.net.preferIPv4Stack=true -jar build/libs/*-swarm.jar &
  - sleep 30
  - http :8080
  - http :8080/max
  - stop_any 8080 8080 8080

##  - cd $parent/java-kube-ee
##  - cd $parent/wildfly-swarm-gradle
#
#  - >
#    for gradle_subproject in \
#      java-kube-ee \
#      wildfly-swarm-gradle \
#    ; do
#
#      cd ${parent}/${gradle_subproject}
#      bash gradlew clean build wildfly-swarm-package
#      java -Djava.net.preferIPv4Stack=true -jar build/libs/*-swarm.jar &
#      wait_for 8080
#      sleep 5
#      http :8080
#      sleep 1
#      stop_any 8080
#      bash docker/bin/test-dockerfile.bash
#      bash docker/bin/test-docker-compose.bash
#      bash docker/bin/test-stack-deploy.bash
#      bash mvnw clean install
#    done

  - >
      cd ${parent}/wildfly-swarm-maven
      bash mvnw clean install
      #bash mvnw -Djava.net.preferIPv4Stack=true wildfly-swarm:run &
      java -Djava.net.preferIPv4Stack=true -jar target/*-swarm.jar &
      sleep 30
      http :8080
      sleep 1
      stop_any 8080
      bash docker/bin/test-dockerfile.bash
      bash docker/bin/test-docker-compose.bash
      # sometimes docker swarm for some reasons not working here as 2nd, 3rd, ...
      bash docker/bin/test-stack-deploy.bash
      bash gradlew clean build wildfly-swarm-package

cache:
  directories:
    - $HOME/.m2
    - $HOME/.gradle
