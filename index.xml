<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>JavaEE examples java-ee-examples (0.0.1) <inlinemediaobject>
<imageobject>
<imagedata fileref="https://travis-ci.org/daggerok/java-ee-examples.svg?branch=master"/>
</imageobject>
<textobject><phrase>Build Status</phrase></textobject>
</inlinemediaobject></title>
<date>2020-04-18 14:52:20 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.1</revnumber>
<date>2020-04-18 14:52:20 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<bridgehead xml:id="introduction" renderas="sect1">Introduction</bridgehead>
<simpara>This documentation contains some help to
<link xl:href="https://github.com/daggerok/java-ee-examples">examples from java-ee-examples repository</link>.
It&#8217;s contains some JavaEE playground projects</simpara>
<formalpara>
<title>build run and test</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./gradlew clean build composeUp

http :8080/app/
http :8080/app/dwr/index.html

./gradlew composeDown

# or just
./gradlew build ; ./gradlew composeDown ; ./gradlew composeUp ; docker-compose -f docker-compose-gradle.yaml logs -f -t</programlisting>
</para>
</formalpara>
</preface>
<chapter xml:id="jboss-eap-postgres">
<title>jboss-eap-postgres</title>
<formalpara>
<title>jboss-eap-6.4/standalone/configuration/standalone.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">        &lt;!-- ... --&gt;
    &lt;/extensions&gt;
    &lt;!-- TODO: CHANGE ME: https://access.redhat.com/solutions/3442891 --&gt;
    &lt;system-properties&gt;
        &lt;property name="jackson.deserialization.whitelist.packages"
                  value="org.kie,org.drools,daggerok"/&gt;
    &lt;/system-properties&gt;
    &lt;!-- TODO: CHANGE ME END --&gt;
    &lt;management&gt;
        &lt;!-- ... --&gt;
        &lt;!-- ... --&gt;
        &lt;subsystem xmlns="urn:jboss:domain:datasources:1.2"&gt;
            &lt;datasources&gt;
                &lt;!-- TODO:
                        CHANGE ME: https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/6.4/html-single/administration_and_configuration_guide/#sect-Example_Datasources
                                   https://www.redhat.com/cms/managed-files/eap_msa_ose3_0.pdf --&gt;
                &lt;datasource jndi-name="java:jboss/datasources/ExampleDS" pool-name="ExampleDS" enabled="true" jta="true" use-java-context="true" use-ccm="false"&gt;
                    &lt;connection-url&gt;jdbc:postgresql://${env.POSTGRES_HOST:postgres.my-app.com}:${env.POSTGRES_PORT:5432}/${env.POSTGRES_DB:db}&lt;/connection-url&gt;
                    &lt;driver&gt;postgresql&lt;/driver&gt;
                    &lt;security&gt;
                        &lt;user-name&gt;${env.POSTGRES_USER:user}&lt;/user-name&gt;
                        &lt;password&gt;${env.POSTGRES_PASSWORD:password}&lt;/password&gt;
                    &lt;/security&gt;
                &lt;/datasource&gt;
                &lt;drivers&gt;
                    &lt;driver name="postgresql" module="org.postgresql"&gt;
                        &lt;xa-datasource-class&gt;org.postgresql.xa.PGXADataSource&lt;/xa-datasource-class&gt;
                    &lt;/driver&gt;
                &lt;/drivers&gt;
                &lt;!-- TODO: CHANGE ME END --&gt;
            &lt;/datasources&gt;
        &lt;/subsystem&gt;
        &lt;!-- ... --&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>jboss-eap-6.4/modules/org/postgresql/main/module.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;module xmlns="urn:jboss:module:1.1" name="org.postgresql"&gt;
  &lt;resources&gt;
    &lt;resource-root path="postgresql-9.4-1206-jdbc4.jar"/&gt;
  &lt;/resources&gt;
  &lt;dependencies&gt;
    &lt;module name="javax.api"/&gt;
    &lt;module name="javax.transaction.api"/&gt;
    &lt;module name="javax.servlet.api" optional="true"/&gt;
  &lt;/dependencies&gt;
&lt;/module&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>persistence.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persistence version="2.0"
             xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"&gt;
  &lt;persistence-unit name="" transaction-type="JTA"&gt;
    &lt;jta-data-source&gt;java:jboss/datasources/ExampleDS&lt;/jta-data-source&gt;
    &lt;properties&gt;
      &lt;property name="hibernate.hbm2ddl.auto" value="create"/&gt;
      &lt;property name="hibernate.show_sql" value="true"/&gt;
      &lt;property name="hibernate.format_sql" value="false"/&gt;
      &lt;!-- optionals: --&gt;
      &lt;!--&lt;property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQL82Dialect"/&gt;--&gt;
    &lt;/properties&gt;
    &lt;!--&lt;provider&gt;org.hibernate.ejb.HibernatePersistence&lt;/provider&gt;--&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>Entity</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Data
@Entity
@Table(name = "my_entities")
@NoArgsConstructor(access = PROTECTED)
@RequiredArgsConstructor(staticName = "of")
@NamedQueries({
    @NamedQuery(name = FIND_ANY, query = "SELECT me FROM MyEntity me WHERE LOWER(me.data) LIKE LOWER(CONCAT('%',:q,'%'))"),
    @NamedQuery(name = FIND_ALL, query = "SELECT me FROM MyEntity me ORDER BY me.createdAt DESC"),
    @NamedQuery(name = COUNT, query = "SELECT COUNT(me) FROM MyEntity me")
})
public class MyEntity implements Serializable {

  public static final String COUNT = "MyEntity.count";
  public static final String FIND_ALL = "MyEntity.findAll";
  public static final String FIND_ANY = "MyEntity.findAny";

  @Id
  @Setter(PRIVATE)
  @GeneratedValue(generator = "UUID2")
  @GenericGenerator(name = "UUID2", strategy = "org.hibernate.id.UUIDGenerator")
  private UUID id;

  @Column
  @NonNull
  String data;

  @Temporal(TIMESTAMP)
  @Column(name = "created")
  Date createdAt;

  @Temporal(TIMESTAMP)
  @Column(name = "updated")
  Date updatedAt;

  @PrePersist
  public void onCreate() {
    createdAt = new Date();
  }

  @PreUpdate
  public void onMerge() {
    final long time = new Date().getTime();
    createdAt = new Date(time);
    updatedAt = new Date(time);
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>JPA EntityManager CDI integration</title>
<para>
<programlisting language="java" linenumbering="unnumbered">/**
 * see https://stackoverflow.com/questions/51756761/jboss-eap-7-1-spring-data-jpa-cdi-extension
 */
@Slf4j
@ApplicationScoped
public class CDIEntityManagerProducer {

  @Produces
  @Dependent
  @PersistenceUnit(unitName = "")
  EntityManagerFactory emf;

  @Produces
  @RequestScoped
  public EntityManager em() {
    final EntityManager em = emf.createEntityManager();
    log.debug("hi {}", em);
    return em;
  }

  public void close(@Disposes EntityManager em) {
    log.debug("bye {}", em);
    em.close();
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>build, run and test</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./mvnw ; ./mvnw -Pdocker docker-compose:up

http :8080/app/ data=ololo
http :8080/app/ data=trololo
http :8080/app/

./mvnw -Pdocker docker-compose:down</programlisting>
</para>
</formalpara>
<section xml:id="jax-rs-hateoas-links">
<title>jax-rs-hateoas-links</title>
<formalpara>
<title>build</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./gradlew clean build composeUp

http :8080/app

./gradlew composeDown</programlisting>
</para>
</formalpara>
<formalpara>
<title>docker redeploy</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">/gradlew war; bash ./gradle/redeploy.sh</programlisting>
</para>
</formalpara>
<simpara>links:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://dennis-xlc.gitbooks.io/restful-java-with-jax-rs-2-0-en/cn/part1/chapter10/building_links_and_link_headers.html">some rax-rs</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.logicbig.com/how-to/code-snippets/jcode-jax-rs-path-param-regex-match-all.html">more jax-rs&#8230;&#8203;</link></simpara>
</listitem>
</itemizedlist>
<simpara>Initially generated by using <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (java-ee)</simpara>
</section>
<section xml:id="aop-logger">
<title>aop-logger</title>
<formalpara>
<title>build run and test (required: docker)</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./gradlew composeUp

http :8080/app/api/ping
http :8080/app/api/pong

# to see aop logger logs
docker logs -f aop-logger_gradle-aop-logger-app_1

./gradlew composeDown</programlisting>
</para>
</formalpara>
<formalpara>
<title>JAX-RS ping-pong resource</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Stateless
@Path("api")
@Produces(APPLICATION_JSON)
public class HealthResource {

  static final Map&lt;String, String&gt; pingPongMap
      = HashMap.of("ping", "pong",
                   "pong", "ping")
               .toJavaMap();

  @Inject
  SomeBusinessLogic logic;

  @GET
  @Path("{path: (ping|pong)}")
  public Response pingPong(@PathParam("path") final String path) {
    logic.doSomething();
    return Response.ok(Json.createObjectBuilder()
                           .add("status", pingPongMap.get(path))
                           .build())
                   .build();
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>business service</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Stateless
@Interceptors(LoggerInterceptor.class)
public class SomeBusinessLogic {

  public void doSomething() {}
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>interceptor</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Slf4j
public class LoggerInterceptor {

  @AroundInvoke
  public Object intercept(InvocationContext ic) throws Exception {
    log.info("intercepting: {} at: {}", ic.getContextData(), ic.getTimer());
    return ic.proceed();
  }
}</programlisting>
</para>
</formalpara>
<simpara>Initially generated by using <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (java-ee)</simpara>
</section>
<section xml:id="jax-rs-regex-path">
<title>jax-rs-regex-path</title>
<formalpara>
<title>example, how to handle <literal>ping</literal>, <literal>pong</literal> and <literal>health</literal> paths by single resource method</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Stateless
@Path("api")
@Produces(APPLICATION_JSON)
public class HealthResource {

  static final Map&lt;String, String&gt; pingPongMap
      = HashMap.of("ping", "pong",
                   "pong", "ping")
               .toJavaMap();

  @GET
  @Path("{path: (health|ping|pong)}")
  public Response health(@PathParam("path") final String path) {
    return Response.ok(Json.createObjectBuilder()
                           .add("status", pingPongMap.getOrDefault(path, "UP"))
                           .build())
                   .build();
  }
}</programlisting>
</para>
</formalpara>
<simpara>Initially generated by using <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (java-ee)</simpara>
</section>
</chapter>
<chapter xml:id="async">
<title>Async</title>
<section xml:id="async-jax-rs-resources">
<title>async-jax-rs-resources</title>
<formalpara>
<title>async resource</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">@Stateless
@Path("items")
@Produces(APPLICATION_JSON)
class AppResource {

  @Context
  lateinit var uriInfo: UriInfo

  @Resource
  lateinit var mes: ManagedExecutorService

  @Inject
  lateinit var itemRepository: ItemRepository

  @GET
  @Path("async")
  fun getAllInAsync(@Suspended asyncResponse: AsyncResponse) = mes.execute {
    val result = itemRepository.findAll()
    asyncResponse.resume(result)
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>RESTEeasy dto</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">@Entity
@JsonIgnoreProperties(ignoreUnknown = true)
data class Item(
    @Id @GeneratedValue var id: Long? = null,
    var value: String? = null
) : Serializable</programlisting>
</para>
</formalpara>
<simpara>Initially generated by using <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (kotlin-ee)</simpara>
</section>
<section xml:id="porcupine-bulkhead-jee8">
<title>porcupine-bulkhead-jee8</title>
<formalpara>
<title>build, run and test</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./gradlew composeUp

http :8080/app/async-items/write1 value=ololo
http :8080/app/async-items/write2 value=trololo

http :8080/app/async-items/read1/1
http :8080/app/async-items/read1

http :8080/app/async-items/read2/2
http :8080/app/async-items/read2</programlisting>
</para>
</formalpara>
<formalpara>
<title>entity</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Data
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Accessors(chain = true)
public class Item implements Serializable {

  private static final long serialVersionUID = 1466287048756540922L;

  @Id
  @GeneratedValue
  Long id;

  String value;
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>repo</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Stateful
@TransactionAttribute(NOT_SUPPORTED)
public class ItemRepository {

  @PersistenceContext
  EntityManager em;

  @TransactionAttribute(REQUIRES_NEW)
  public Item save(final Item item) {
    em.persist(item);
    return item;
  }

  public Item findOne(final Long id) {
    return em.find(Item.class, id);
  }

  public List&lt;Item&gt; findAll() {
    return em.createQuery("select i from Item i", Item.class)
             .getResultList();
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>write resource</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Slf4j
@Stateless
@Path("async-items")
@Produces(APPLICATION_JSON)
public class WriteItemsResource {

  @Inject
  ItemRepository itemRepository;

  @Inject
  @Dedicated("write-async-items")
  ExecutorService writeExecutor;

  @POST
  @Path("write1")
  public void post1(@Valid @NotNull final Item item, @Suspended final AsyncResponse asyncResponse) {
    writeExecutor.execute(() -&gt; {
      final Item result = itemRepository.save(item);
      asyncResponse.resume(result);
    });
  }

  @POST
  @Path("write2")
  public void post2(@Valid @NotNull final Item item, @Suspended final AsyncResponse asyncResponse) {
    CompletableFuture.supplyAsync(() -&gt; itemRepository.save(item), writeExecutor)
                     .thenAccept(asyncResponse::resume);
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>read resource</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@Slf4j
@Stateless
@Path("async-items")
@Produces(APPLICATION_JSON)
public class ReadItemsResource {

  @Inject
  ItemRepository itemRepository;

  @Inject
  @Dedicated("read-async-items")
  ExecutorService readExecutor;

  @GET
  @Path("read1")
  public void getAll1(@Suspended final AsyncResponse asyncResponse) {
    readExecutor.execute(() -&gt; {
      final List&lt;Item&gt; result = itemRepository.findAll();
      asyncResponse.resume(result);
    });
  }

  @GET
  @Path("read2")
  public void getAll2(@Suspended final AsyncResponse asyncResponse) {
    CompletableFuture
        .supplyAsync(() -&gt; itemRepository.findAll(), readExecutor)
        .thenAccept(asyncResponse::resume);
  }

  @GET
  @Path("read1/{id}")
  public void get1(@PathParam("id") final Long id, @Suspended final AsyncResponse asyncResponse) {
    readExecutor.execute(() -&gt; {
      final Item result = itemRepository.findOne(id);
      asyncResponse.resume(result);
    });
  }

  @GET
  @Path("read2/{id}")
  public void get2(@PathParam("id") final Long id, @Suspended final AsyncResponse asyncResponse) {
    CompletableFuture.supplyAsync(() -&gt; itemRepository.findOne(id), readExecutor)
                     .thenAccept(asyncResponse::resume);
  }
}</programlisting>
</para>
</formalpara>
<simpara>Initially generated by using <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (kotlin-ee)</simpara>
</section>
</chapter>
<chapter xml:id="micro-profile">
<title>Micro Profile</title>
<formalpara>
<title><emphasis>MicroProfile 1.0 (CDI + JAX-RS + JSON-P)</emphasis></title>
<para>
<screen>&lt;dependencyManagement&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.wildfly.swarm&lt;/groupId&gt;
      &lt;artifactId&gt;bom-all&lt;/artifactId&gt;
      &lt;version&gt;${version.wildfly.swarm}&lt;/version&gt;
      &lt;scope&gt;import&lt;/scope&gt;
      &lt;type&gt;pom&lt;/type&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;</screen>
</para>
</formalpara>
</chapter>
<chapter xml:id="jboss-4-jax-rs">
<title>JBOSS 4 | JAX-RS</title>
<formalpara>
<title>build</title>
<para>
<screen>./mvnw clean package com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:up
./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:down

./gradlew clean build composeUp
./gradlew composeDown</screen>
</para>
</formalpara>
<simpara>generated by <link xl:href="https://github.com/daggerok/generator-daggerok-fatjar/">daggerok-fatjar</link> yeoman generator</simpara>
<simpara>in fucking progress&#8230;&#8203;</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://books.google.com.ua/books?id=-RhKDwAAQBAJ&amp;pg=PA319&amp;lpg=PA319&amp;dq=javaee+kafka.properties&amp;source=bl&amp;ots=HM7QXscLch&amp;sig=7z2zCVuPZjalSXh2zP4D-sj9jB8&amp;hl=ru&amp;sa=X&amp;ved=0ahUKEwjQsuzoo6XZAhVBhywKHdakBREQ6AEIQDAD#v=onepage&amp;q=javaee%20kafka.properties&amp;f=false">book</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.youtube.com/watch?v=HLfl2ccS304&amp;index=11&amp;list=PLEV9ul4qfGOZ5gWIPMlFGMUpenSs1EvxZ">youtube</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/sdaschner/scalable-coffee-shop">Github: sdaschner/scalable-coffee-shop</link></simpara>
</listitem>
</orderedlist>
<formalpara>
<title>kafka</title>
<para>
<screen>cd /tmp
wget -O kafka.jar https://github.com/daggerok/embedded-kafka/raw/mvn-repo/daggerok/embedded-kafka/0.0.1/embedded-kafka-0.0.1.jar
java -jar kafka.jar</screen>
</para>
</formalpara>
<formalpara>
<title>gradle</title>
<para>
<screen>./gradlew
bash build/libs/*jar

./gradlew build composeUp
./gradlew composeDown</screen>
</para>
</formalpara>
</chapter>
<chapter xml:id="maven-is-not-working-properly">
<title>maven is not working properly</title>
<simpara>actually working but with hack (see src/main/webapp/WEB-INF/classes/README)</simpara>
<formalpara>
<title>maven</title>
<para>
<screen>./mvnw
java -jar target/*.jar

./mvnw; ./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:up
./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:down</screen>
</para>
</formalpara>
<simpara>generated using <link xl:href="https://github.com/daggerok/generator-daggerok-fatjar/">daggerok-fatjar</link> yeoman generator</simpara>
<simpara>inside:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>java 8 based project</simpara>
</listitem>
<listitem>
<simpara>javaee 8.0 using wildfly-swarm micro-profile</simpara>
</listitem>
<listitem>
<simpara>kotlin support</simpara>
</listitem>
<listitem>
<simpara>lombok (slf4j + logback logging)</simpara>
</listitem>
<listitem>
<simpara>vavr (javaslang)</simpara>
</listitem>
<listitem>
<simpara>support maven</simpara>
</listitem>
<listitem>
<simpara>support gradle</simpara>
</listitem>
<listitem>
<simpara>supports testing junit 4 / 5</simpara>
</listitem>
<listitem>
<simpara>docker / docker-compose support</simpara>
</listitem>
</orderedlist>
<screen>./gradlew
bash build/libs/*jar

./gradlew build composeUp
./gradlew composeDown</screen>
<screen>./mvnw
java -jar target/*.jar

./mvnw; ./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:up
./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:down</screen>
<simpara>generated using <link xl:href="https://github.com/daggerok/generator-daggerok-fatjar/">daggerok-fatjar</link> yeoman generator</simpara>
<simpara>inside:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>java 8 based project</simpara>
</listitem>
<listitem>
<simpara>javaee 8.0</simpara>
</listitem>
<listitem>
<simpara>lombok (slf4j + logback logging)</simpara>
</listitem>
<listitem>
<simpara>vavr (javaslang)</simpara>
</listitem>
<listitem>
<simpara>support maven</simpara>
</listitem>
<listitem>
<simpara>support gradle</simpara>
</listitem>
<listitem>
<simpara>supports testing junit 4 / 5</simpara>
</listitem>
<listitem>
<simpara>docker / docker-compose support (JBOSS EAP 7)</simpara>
</listitem>
</orderedlist>
<formalpara>
<title>build</title>
<para>
<screen>./mvnw clean package com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:up
./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:down

./gradlew clean build composeUp
./gradlew composeDown</screen>
</para>
</formalpara>
</chapter>
<chapter xml:id="javaee-wildfly-swarm-micro-profile-using-gradle">
<title>JavaEE Wildfly-Swarm Micro-Profile using Gradle</title>
<section xml:id="wildfly-swarm-gradle">
<title>wildfly-swarm-gradle</title>
<simpara>This repository contains simple JavaEE JAX-RS Wildfly Swarm Micro-profile example playground application</simpara>
<formalpara>
<title>using gradle / java microprofile</title>
<para>
<screen>bash gradlew clean build
java -Djava.net.preferIPv4Stack=true -jar build/libs/wildfly-swarm-gradle-swarm.jar
http :8080</screen>
</para>
</formalpara>
<formalpara>
<title>using docker</title>
<para>
<screen>docker build --force-rm -f ./docker/src/Dockerfile -t docker-java-ee-examples .
docker run -d -p 8080:8080 --rm --name wildfly-swarm-gradle docker-java-ee-examples
http :8080
docker rm -f -v wildfly-swarm-gradle</screen>
</para>
</formalpara>
<formalpara>
<title>using docker-compose</title>
<para>
<screen>docker-compose -f ./docker/src/docker-compose.yml up -d
http :8080
docker-compose -f ./docker/src/docker-compose.yml down -v</screen>
</para>
</formalpara>
<formalpara>
<title>using docker swarm stack deploy</title>
<para>
<screen>docker swarm init
docker service create --detach=false --name registry --publish 5000:5000 registry:2
docker build -f ./docker/src/Dockerfile -t 127.0.0.1:5000/app .
docker push 127.0.0.1:5000/app
#docker-compose -f ./docker/src/stack-deploy.yml build --force-rm --no-cache --pull
#docker-compose -f ./docker/src/stack-deploy.yml push
docker stack deploy --compose-file ./docker/src/stack-deploy.yml java-ee
docker stack services --filter name="java-ee_app" --format="{{.Name}} {{.Replicas}}" java-ee
docker service scale --detach=false java-ee_app=2

sleep 15
docker stack services java-ee

http :8080

docker swarm leave --force
docker system prune -af</screen>
</para>
</formalpara>
<simpara>links:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://microprofile.io/">Eclipse MicroProfile</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://wildfly-swarm.io/posts/microprofile-with-wildfly-swarm/">Wildfly Swarm Micro-Profile</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://howto.wildfly-swarm.io/">Wildfly Swarm Book</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://stackoverflow.com/questions/37273621/fail-to-start-jax-rs-service-on-wildfly-swarm">wildfly-swarm fails on travis-ci</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://wildfly-swarm.gitbooks.io/wildfly-swarm-users-guide/getting-started/tooling/gradle-plugin.html">wildfly-swarm gradle plugin</link></simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="javaee-wildfly-swarm-micro-profile-using-maven">
<title>JavaEE Wildfly-Swarm Micro-Profile using Maven</title>
<section xml:id="wildfly-swarm-maven">
<title>wildfly-swarm-maven</title>
<simpara>This repository contains simple JavaEE JAX-RS Wildfly Swarm Micro-profile example playground application</simpara>
<formalpara>
<title>using maven</title>
<para>
<screen>mvn -Djava.net.preferIPv4Stack=true wildfly-swarm:run
http :8080</screen>
</para>
</formalpara>
<formalpara>
<title>using wildfly swarm microprofile</title>
<para>
<screen>mvn clean package
java -Djava.net.preferIPv4Stack=true -jar target/java-ee-examples-0.0.0-swarm.jar
http :8080</screen>
</para>
</formalpara>
<formalpara>
<title>using docker</title>
<para>
<screen>docker build --force-rm -f ./docker/src/Dockerfile -t docker-java-ee-examples .
docker run -d -p 8080:8080 --rm --name wildfly-swarm-maven docker-java-ee-examples
http :8080
docker stop wildfly-swarm-maven</screen>
</para>
</formalpara>
<formalpara>
<title>using docker-compose</title>
<para>
<screen>docker-compose -f ./docker/src/docker-compose.yml up -d
http :8080
docker-compose -f ./docker/src/docker-compose.yml down -v</screen>
</para>
</formalpara>
<formalpara>
<title>using docker swarm stack deploy</title>
<para>
<screen>docker swarm init
docker service create --detach=false --name registry --publish 5000:5000 registry:2
docker build -f ./docker/src/Dockerfile -t 127.0.0.1:5000/app .
docker push 127.0.0.1:5000/app
#docker-compose -f ./docker/src/stack-deploy.yml build --force-rm --no-cache --pull
#docker-compose -f ./docker/src/stack-deploy.yml push
docker stack deploy --compose-file ./docker/src/stack-deploy.yml java-ee
docker stack services --filter name="java-ee_app" --format="{{.Name}} {{.Replicas}}" java-ee
docker service scale --detach=false java-ee_app=2

sleep 30
docker stack services java-ee

http :8080

docker swarm leave --force
docker system prune -af</screen>
</para>
</formalpara>
<simpara>links:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://microprofile.io/">Eclipse MicroProfile</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://wildfly-swarm.io/posts/microprofile-with-wildfly-swarm/">Wildfly Swarm Micro-Profile</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://howto.wildfly-swarm.io/">Wildfly Swarm Book</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://stackoverflow.com/questions/37273621/fail-to-start-jax-rs-service-on-wildfly-swarm">wildfly-swarm fails on travis-ci</link></simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="kumuluzee-microprofile-1-0">
<title>Kumuluzee MicroProfile 1.0</title>
<section xml:id="kumuluzee-microprofile-1-0-2">
<title>kumuluzee-microprofile-1.0</title>
<simpara>This repository contains simple JavaEE Wildfly Swarm Micro-profile example - serving static content</simpara>
<formalpara>
<title>using gradle / java microprofile</title>
<para>
<screen>bash gradlew clean build
java -Djava.net.preferIPv4Stack=true -jar build/libs/wildfly-swarm-gradle-swarm.jar
http :8080</screen>
</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="javaee-kubernetes">
<title>JavaEE Kubernetes</title>
<section xml:id="java-kube-ee">
<title>java-kube-ee</title>
<simpara>This repository contains simple JavaEE JAX-RS Wildfly Swarm Micro-profile example playground application</simpara>
<formalpara>
<title>prepare kubernetes cluster, build docker image, push into local registry</title>
<para>
<screen>minikube start --cpus=4 --memory=4096
eval (minikube docker-env)
docker run -d --rm --name registry -p 5000:5000 registry:2
docker build -t 127.0.0.1:5000/app -f ./docker/src/Dockerfile .
docker push 127.0.0.1:5000/app</screen>
</para>
</formalpara>
<formalpara>
<title>create kubernete yaml file</title>
<para>
<screen>vim ./docker/k8s/app.yml

kubectl apply -f ./docker/k8s/app.yml --validate=false

kubectl get svc -o wide                                               23:51:57
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE       SELECTOR
app          NodePort    10.0.0.189   &lt;none&gt;        8080:32464/TCP   3m        app=app

curl 192.168.99.100:32464
# or
http (minikube service app --url)                                                                               22:21:09

[
    "one",
    "two",
    "three",
    "kubeee"
]</screen>
</para>
</formalpara>
<simpara>now update code and redeploy app</simpara>
<formalpara>
<title>deploy app</title>
<para>
<screen>bash gradlew clean build
docker build -t 127.0.0.1:5000/app:v2 -f ./docker/src/Dockerfile .
docker push 127.0.0.1:5000/app:v2
vim ./docker/k8s/app.yml # update image: 127.0.0.1:5000/app:v2
kubectl apply -f ./docker/k8s --validate=false</screen>
</para>
</formalpara>
<formalpara>
<title>terminal 1</title>
<para>
<screen>kubectl get pods -w                 23:59:35
NAME                   READY     STATUS    RESTARTS   AGE
app-1515935557-411m1   1/1       Running   0          10m
app-1515935557-4d3gf   1/1       Terminating   0         4m
app-1515935557-4d3gf   0/1       Terminating   0         4m
app-3366916455-bw6m9   0/1       Pending   0         0s
app-3366916455-bw6m9   0/1       ContainerCreating   0         0s
app-3366916455-bw6m9   1/1       Running   0         1s</screen>
</para>
</formalpara>
<formalpara>
<title>terminal 2</title>
<para>
<screen>while true; curl (minikube service app --url); echo""; sleep 1; end
["one","two","three","kubeee"]
["one","two","three","kubeee"]
Waiting, endpoint for service is not ready yet...
["one","two","three","kubeee","2017-10-02T21:12:34.095Z"]
["one","two","three","kubeee","2017-10-02T21:12:36.182Z"]</screen>
</para>
</formalpara>
<simpara>second test but using ip, not minikube service</simpara>
<formalpara>
<title>redeploy app prev version</title>
<para>
<screen>vim ./docker/k8s/app.yml # update image: 127.0.0.1:5000/app
kubectl apply -f ./docker/k8s --validate=false</screen>
</para>
</formalpara>
<formalpara>
<title>terminal 1</title>
<para>
<screen>kubectl get pods -w                 23:59:35
NAME                   READY     STATUS    RESTARTS   AGE
app-1515935557-411m1   1/1       Running   0          10m
...
app-1515935557-4d3gf   1/1       Terminating   0         4m
app-1515935557-4d3gf   0/1       Terminating   0         4m
...
app-3366916455-bw6m9   0/1       Pending   0         0s
app-3366916455-bw6m9   0/1       ContainerCreating   0         0s
app-3366916455-bw6m9   1/1       Running   0         1s</screen>
</para>
</formalpara>
<formalpara>
<title>terminal 2</title>
<para>
<screen>while true; curl 192.168.99.100:32161; echo""; sleep 1; end
["one","two","three","kubeee"]
["one","two","three","kubeee"]
Waiting, endpoint for service is not ready yet...
["one","two","three","kubeee","172.17.0.5"]
["one","two","three","kubeee","172.17.0.6"]</screen>
</para>
</formalpara>
<formalpara>
<title>autoscale</title>
<para>
<screen>kubectl autoscale deployment app --min=2 --max=3</screen>
</para>
</formalpara>
<formalpara>
<title>scale down</title>
<para>
<screen>kubectl scale deployment app --replicas=3</screen>
</para>
</formalpara>
<formalpara>
<title>cleanup</title>
<para>
<screen>kubectl delete all -l name=app
# or
kubectl delete service app; kubectl delete deployment app

minikube stop; minikube delete</screen>
</para>
</formalpara>
</section>
<section xml:id="old">
<title>old</title>
<formalpara>
<title>using gradle / java microprofile</title>
<para>
<screen>bash gradlew clean build
java -Djava.net.preferIPv4Stack=true -jar build/libs/java-kube-ee-swarm.jar
http :8080</screen>
</para>
</formalpara>
<formalpara>
<title>e2e tests using bash scripts)</title>
<para>
<screen>bash ./docker/bin/test-dockerfile.bash     # docker
bash ./docker/bin/test-docker-compose.bash # docker compose
bash ./docker/bin/test-stack-deploy.bash   # docker swarm cluster</screen>
</para>
</formalpara>
<simpara>links</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://www.youtube.com/watch?v=kNZmxFcggjM">like so</link></simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="javaee-using-kotlin">
<title>JavaEE using Kotlin</title>
<section xml:id="java-kube-ee-2">
<title>java-kube-ee</title>
<simpara>This repository contains simple JavaEE JAX-RS Wildfly Swarm Micro-profile example playground application</simpara>
<formalpara>
<title>prepare kubernetes cluster, build docker image, push into local registry</title>
<para>
<screen>minikube start --cpus=4 --memory=4096
eval (minikube docker-env)
docker run -d --rm --name registry -p 5000:5000 registry:2
docker build -t 127.0.0.1:5000/app -f ./docker/src/Dockerfile .
docker push 127.0.0.1:5000/app</screen>
</para>
</formalpara>
<formalpara>
<title>create kubernete yaml file</title>
<para>
<screen>vim ./docker/k8s/app.yml

kubectl apply -f ./docker/k8s/app.yml --validate=false

kubectl get svc -o wide                                               23:51:57
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE       SELECTOR
app          NodePort    10.0.0.189   &lt;none&gt;        8080:32464/TCP   3m        app=app

curl 192.168.99.100:32464
# or
http (minikube service app --url)                                                                               22:21:09

[
    "one",
    "two",
    "three",
    "kubeee"
]</screen>
</para>
</formalpara>
<simpara>now update code and redeploy app</simpara>
<formalpara>
<title>deploy app</title>
<para>
<screen>bash gradlew clean build
docker build -t 127.0.0.1:5000/app:v2 -f ./docker/src/Dockerfile .
docker push 127.0.0.1:5000/app:v2
vim ./docker/k8s/app.yml # update image: 127.0.0.1:5000/app:v2
kubectl apply -f ./docker/k8s --validate=false</screen>
</para>
</formalpara>
<formalpara>
<title>terminal 1</title>
<para>
<screen>kubectl get pods -w                 23:59:35
NAME                   READY     STATUS    RESTARTS   AGE
app-1515935557-411m1   1/1       Running   0          10m
app-1515935557-4d3gf   1/1       Terminating   0         4m
app-1515935557-4d3gf   0/1       Terminating   0         4m
app-3366916455-bw6m9   0/1       Pending   0         0s
app-3366916455-bw6m9   0/1       ContainerCreating   0         0s
app-3366916455-bw6m9   1/1       Running   0         1s</screen>
</para>
</formalpara>
<formalpara>
<title>terminal 2</title>
<para>
<screen>while true; curl (minikube service app --url); echo""; sleep 1; end
["one","two","three","kubeee"]
["one","two","three","kubeee"]
Waiting, endpoint for service is not ready yet...
["one","two","three","kubeee","2017-10-02T21:12:34.095Z"]
["one","two","three","kubeee","2017-10-02T21:12:36.182Z"]</screen>
</para>
</formalpara>
<simpara>second test but using ip, not minikube service</simpara>
<formalpara>
<title>redeploy app prev version</title>
<para>
<screen>vim ./docker/k8s/app.yml # update image: 127.0.0.1:5000/app
kubectl apply -f ./docker/k8s --validate=false</screen>
</para>
</formalpara>
<formalpara>
<title>terminal 1</title>
<para>
<screen>kubectl get pods -w                 23:59:35
NAME                   READY     STATUS    RESTARTS   AGE
app-1515935557-411m1   1/1       Running   0          10m
...
app-1515935557-4d3gf   1/1       Terminating   0         4m
app-1515935557-4d3gf   0/1       Terminating   0         4m
...
app-3366916455-bw6m9   0/1       Pending   0         0s
app-3366916455-bw6m9   0/1       ContainerCreating   0         0s
app-3366916455-bw6m9   1/1       Running   0         1s</screen>
</para>
</formalpara>
<formalpara>
<title>terminal 2</title>
<para>
<screen>while true; curl 192.168.99.100:32161; echo""; sleep 1; end
["one","two","three","kubeee"]
["one","two","three","kubeee"]
Waiting, endpoint for service is not ready yet...
["one","two","three","kubeee","172.17.0.5"]
["one","two","three","kubeee","172.17.0.6"]</screen>
</para>
</formalpara>
<formalpara>
<title>autoscale</title>
<para>
<screen>kubectl autoscale deployment app --min=2 --max=3</screen>
</para>
</formalpara>
<formalpara>
<title>scale down</title>
<para>
<screen>kubectl scale deployment app --replicas=3</screen>
</para>
</formalpara>
<formalpara>
<title>cleanup</title>
<para>
<screen>kubectl delete all -l name=app
# or
kubectl delete service app; kubectl delete deployment app

minikube stop; minikube delete</screen>
</para>
</formalpara>
</section>
<section xml:id="old-2">
<title>old</title>
<formalpara>
<title>using gradle / java microprofile</title>
<para>
<screen>bash gradlew clean build
java -Djava.net.preferIPv4Stack=true -jar build/libs/java-kube-ee-swarm.jar
http :8080</screen>
</para>
</formalpara>
<formalpara>
<title>e2e tests using bash scripts)</title>
<para>
<screen>bash ./docker/bin/test-dockerfile.bash     # docker
bash ./docker/bin/test-docker-compose.bash # docker compose
bash ./docker/bin/test-stack-deploy.bash   # docker swarm cluster</screen>
</para>
</formalpara>
<simpara>links</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://www.youtube.com/watch?v=kNZmxFcggjM">like so</link></simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="kotlin-plugins-java-ee">
<title>kotlin-plugins-java-ee</title>
<simpara>This repository contains simple JavaEE JAX-RS Wildfly Swarm Micro-profile example using Kotlin</simpara>
<screen>bash gradlew clean build
bash build/libs/*-swarm.jar

http :8080
http :8080/max</screen>
</section>
<section xml:id="main-swarm-rest-api">
<title>main-swarm-rest-api</title>
<simpara>This repository contains simple JavaEE JAX-RS Wildfly Swarm Micro-profile example playground application</simpara>
<formalpara>
<title>using gradle / java microprofile</title>
<para>
<screen>bash gradlew clean build
java -Djava.net.preferIPv4Stack=true -jar build/libs/wildfly-swarm-gradle-swarm.jar
http :8080
http :8080/api
http :8080/api/max</screen>
</para>
</formalpara>
</section>
<section xml:id="main-swarm-static-content">
<title>main-swarm-static-content</title>
<simpara>This repository contains simple JavaEE Wildfly Swarm Micro-profile example - serving static content</simpara>
<formalpara>
<title>using gradle / java microprofile</title>
<para>
<screen>bash gradlew clean build
java -Djava.net.preferIPv4Stack=true -jar build/libs/wildfly-swarm-gradle-swarm.jar
http :8080</screen>
</para>
</formalpara>
</section>
<section xml:id="kotlin-java-ee-payara-docker">
<title>kotlin-java-ee-payara-docker</title>
<simpara>This repository contains simple JavaEE JAX-RS Wildfly Swarm Micro-profile example using Kotlin</simpara>
<screen>./gradlew clean war
docker-compose up --force-recreate --build --remove-orphans
http :8080/payara-app/
http :8080/payara-app/max
docker-compose down -v</screen>
</section>
<section xml:id="kotlin-javaee-cdi-h2">
<title>kotlin-javaee-cdi-h2</title>
<formalpara>
<title>according to default ${JBOSS_HOME}/standalone/configuration/standalone.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- skepped... --&gt;
&lt;datasource jndi-name="java:jboss/datasources/ExampleDS" pool-name="ExampleDS" enabled="true" use-java-context="true"&gt;
&lt;!-- skepped... --&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>build and test</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">docker-compose down -v; ./gradlew; ./mvnw; docker-compose up --build --force-recreate --remove-orphans
# gradle
http get  :8080/kotlin-ee/
http get  :8080/kotlin-ee/get-all
http post :8080/kotlin-ee/save-some
http get  :8080/kotlin-ee/get-all
# maven
http get  :8081/kotlin-ee/
http get  :8081/kotlin-ee/get-all
http post :8081/kotlin-ee/save-some
http get  :8081/kotlin-ee/get-all</programlisting>
</para>
</formalpara>
<simpara><emphasis>Just JBoss EAP in Docker</emphasis></simpara>
</section>
</chapter>
<chapter xml:id="jboss-eap-in-docker">
<title>JBoss EAP in Docker</title>
<section xml:id="faces">
<title>faces</title>
<formalpara>
<title>build</title>
<para>
<screen>./mvnw clean package com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:up
./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:down

http :8080/app/

./gradlew clean build composeUp
./gradlew composeDown</screen>
</para>
</formalpara>
<simpara>links:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://docs.oracle.com/javaee/6/tutorial/doc/gijtu.html">facelets oracle tutorial</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://stackoverflow.com/questions/17654066/how-to-forward-a-request-using-jax-rs">JAX-RS redirect</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://javaee.github.io/tutorial/toc.html">Java Platform, Enterprise Edition (Java EE) 8 The Java EE Tutorial</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://javaee.github.io/firstcup/toc.html">Java Platform, Enterprise Edition (Java EE) 8 Your First Cup: An Introduction to the Java EE Platform</link></simpara>
</listitem>
</orderedlist>
<simpara>generated by <link xl:href="https://github.com/daggerok/generator-daggerok-fatjar/">daggerok-fatjar</link> yeoman generator
=== facelets-example</simpara>
<formalpara>
<title>build</title>
<para>
<screen>./mvnw clean package com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:up
./mvnw com.dkanejs.maven.plugins:docker-compose-maven-plugin:1.0.1:down

http :8080/app/
http :8080/app/health
http :8080/app/faces/index.xhtml

./gradlew clean build composeUp
./gradlew composeDown</screen>
</para>
</formalpara>
<simpara>links:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://docs.oracle.com/javaee/6/tutorial/doc/gijtu.html">facelets oracle tutorial</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://stackoverflow.com/questions/17654066/how-to-forward-a-request-using-jax-rs">JAX-RS redirect</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://javaee.github.io/tutorial/toc.html">Java Platform, Enterprise Edition (Java EE) 8 The Java EE Tutorial</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://javaee.github.io/firstcup/toc.html">Java Platform, Enterprise Edition (Java EE) 8 Your First Cup: An Introduction to the Java EE Platform</link></simpara>
</listitem>
</orderedlist>
<simpara>generated by <link xl:href="https://github.com/daggerok/generator-daggerok-fatjar/">daggerok-fatjar</link> yeoman generator</simpara>
</section>
<section xml:id="jboss-eap-ext-js">
<title>jboss-eap-ext.js</title>
<simpara>packaging two WARs into jboss AS</simpara>
<formalpara>
<title>Using JBoss EAP 6.4 in docker</title>
<para>
<screen>./mvnw clean install -U -T 4; docker-compose up --build --force-recreate

open localhost:8080/ui/

docker-compose down -v</screen>
</para>
</formalpara>
</section>
<section xml:id="xmlrpc">
<title>xmlrpc</title>
<simpara>Apache XML-RPC (org.apache.xmlrpc)</simpara>
<simpara>variations:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="./server-client/">monolith</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./server/">micro-server</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="./client/">micro-client</link></simpara>
</listitem>
</orderedlist>
<formalpara>
<title>build and test</title>
<para>
<screen>docker-compose down -v; ./mvnw clean package; docker-compose up --build</screen>
</para>
</formalpara>
</section>
<section xml:id="ear">
<title>ear</title>
<formalpara>
<title>build</title>
<para>
<screen>./mvnw clean package -U</screen>
</para>
</formalpara>
<formalpara>
<title>docker</title>
<para>
<screen>docker-compose up --build --force-recreate --remove-orphans
docker-compose down -v
# docker rm -f -v (docker ps -a|grep -v CONTAINER|awk '{print $1}')</screen>
</para>
</formalpara>
<formalpara>
<title>testing</title>
<para>
<screen>http :8080/module-1/
http :8080/module-2/
http :8080/module-3/
http :8080/module-4/</screen>
</para>
</formalpara>
<formalpara>
<title>lombok for java 7 (maven)</title>
<para>
<screen>&lt;dependency&gt;
  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
  &lt;artifactId&gt;lombok&lt;/artifactId&gt;
  &lt;version&gt;1.14.2&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</screen>
</para>
</formalpara>
<formalpara>
<title>lombok for java 7 (gradle)</title>
<para>
<screen>dependencies {
  compileOnly 'org.projectlombok:lombok:1.14.2'
}</screen>
</para>
</formalpara>
</section>
<section xml:id="ejb-2">
<title>ejb-2</title>
<formalpara>
<title>build</title>
<para>
<screen>./mvnw clean package -U</screen>
</para>
</formalpara>
<formalpara>
<title>docker</title>
<para>
<screen>docker-compose up --build --force-recreate --remove-orphans
docker-compose down -v
# docker rm -f -v (docker ps -a|grep -v CONTAINER|awk '{print $1}')</screen>
</para>
</formalpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Classic EJB 2.1 Local + Remote interfaces:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>ejb-modules/greeter-impl</simpara>
</listitem>
<listitem>
<simpara>ejb-modules/greeter-local-api</simpara>
</listitem>
<listitem>
<simpara>ejb-modules/greeter-remote-api</simpara>
</listitem>
<listitem>
<simpara>client-modules/greeter-remote-client</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Using remote EJB interface only:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>ejb-modules/remote-only-api</simpara>
</listitem>
<listitem>
<simpara>ejb-modules/remote-only-impl</simpara>
</listitem>
<listitem>
<simpara>client-modules/remote-only-client</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>Access EJB locally:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>ejb-modules/goodbyer-impl</simpara>
</listitem>
<listitem>
<simpara>ejb-modules/goodbyer-local-api</simpara>
</listitem>
<listitem>
<simpara>client-modules/goodbyer-local-client</simpara>
</listitem>
</orderedlist>
</listitem>
</orderedlist>
<formalpara>
<title>testing (remote ejb call)</title>
<para>
<screen>http :8080/greeter-remote-client/
http :8080/remote-only-client/
http :8080/goodbyer-local-client/</screen>
</para>
</formalpara>
<simpara>links:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://docs.oracle.com/cd/E16439_01/doc.1013/e13981/ses21imp001.htm">EJB 2.1 deployment descriptor</link></simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="timer">
<title>timer</title>
<formalpara>
<title>build and test</title>
<para>
<screen>docker-compose down -v; ./mvnw; docker-compose up --build
http :8080/client/start
http :8080/client/stop</screen>
</para>
</formalpara>
</section>
<section xml:id="timer-async-ejb">
<title>timer-async-ejb</title>
<formalpara>
<title>build and test</title>
<para>
<screen>docker-compose down -v; ./mvnw; docker-compose up --build
http :8080/client/start; sleep 3; http :8080/client/stop
http :8080/client/max\?name=bax
http :8080/client/max
http :8080/client</screen>
</para>
</formalpara>
</section>
<section xml:id="ejb-3-java-ee-7">
<title>ejb-3-java-ee-7</title>
<formalpara>
<title>build and test</title>
<para>
<screen>docker-compose down -v; ./mvnw; docker-compose up --build
http :8080/client/start; sleep 3; http :8080/client/stop
http :8080/client/fax\?name=max
http :8080/client/bax
http :8080/client</screen>
</para>
</formalpara>
</section>
<section xml:id="ejb-stateful-singleton">
<title>ejb-stateful-singleton</title>
<formalpara>
<title>build and test</title>
<para>
<screen>docker-compose down -v; ./mvnw; docker-compose up --build
http :8080/client/
http :8080/client/get\?key=EJB
http post :8080/client/set\?key=EJB\&amp;value=some-value
http :8080/client/get\?key=EJB
http post :8080/client/counter/increment
http post :8080/client/counter/decr
http post :8080/client/counter/incr
http :8080/client/get\?key=EJB
http post :8080/client/reset</screen>
</para>
</formalpara>
</section>
<section xml:id="jboss-eap-h2-ejb">
<title>jboss-eap-h2-ejb</title>
<formalpara>
<title>according to default ${JBOSS_HOME}/standalone/configuration/standalone.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;!-- skepped... --&gt;
&lt;datasource jndi-name="java:jboss/datasources/ExampleDS" pool-name="ExampleDS" enabled="true" use-java-context="true"&gt;
&lt;!-- skepped... --&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>build and test</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">docker-compose down -v; ./mvnw; docker-compose up --build --force-recreate --remove-orphans
http post :8080/client/update/max
http post :8080/client/update/maxp
http post :8080/client/update/amaxp
http :8080/client/
http post :8080/client/update/max\?remove=true
http :8080/client/</programlisting>
</para>
</formalpara>
<simpara>links:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://access.redhat.com/articles/112673#EAP_6">eap 6</link></simpara>
</listitem>
</orderedlist>
</section>
<section xml:id="plain-http-servlet">
<title>plain HTTP Servlet</title>
<simpara>JBOSS EAP 7.1</simpara>
<formalpara>
<title>build and run using docker</title>
<para>
<screen>docker-compose down -v; ./mvnw clean package; ./gradlew clean build; docker-compose up --build --force-recreate --remove-orphans

http :8081/plain-http-servlet/
http :8082/plain-http-servlet/</screen>
</para>
</formalpara>
<formalpara>
<title>project structure</title>
<para>
<screen>mkdir -p src/main/java/daggerok \
         src/main/webapp/WEB-INF

touch src/main/java/daggerok/AppServlet.java \
      src/main/webapp/WEB-INF/web.xml \
      build.gradle \
      pom.xml</screen>
</para>
</formalpara>
<formalpara>
<title>vim src/main/java/daggerok/AppServlet.java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">@WebServlet("/")
public class AppServlet extends HttpServlet {

  @Override
  public void service(final ServletRequest req, final ServletResponse res) throws ServletException, IOException {
    final PrintWroter writer = res.getWriter();
    writer.println("&lt;b&gt;hi!&lt;/b&gt;");
    writer.close();
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>vim src/main/webapp/WEB-INF/web.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1"&gt;
&lt;/web-app&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>vim build.gradle</title>
<para>
<programlisting language="groovy" linenumbering="unnumbered">plugins {
  id "war"
}

group "daggerok"
version "0.0.1"
description "ololo trololo"
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_7

war {
  archiveName = "${project.name}.war"
}

repositories {
  mavenCentral()
}

dependencies {
  providedCompile "javax.servlet:javax.servlet-api:3.1.0"
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>vim pom.xml</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;

  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

  &lt;groupId&gt;daggerok&lt;/groupId&gt;
  &lt;artifactId&gt;plain-http-servlet&lt;/artifactId&gt;
  &lt;version&gt;0.0.1&lt;/version&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;

  &lt;name&gt;plain-http-servlet&lt;/name&gt;
  &lt;description&gt;ololo trololo&lt;/description&gt;

  &lt;properties&gt;
    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
  &lt;/properties&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
      &lt;version&gt;3.1.0&lt;/version&gt;
      &lt;optional&gt;true&lt;/optional&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;

  &lt;build&gt;
    &lt;finalName&gt;${project.artifactId}&lt;/finalName&gt;
    &lt;defaultGoal&gt;clean package&lt;/defaultGoal&gt;

    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.5&lt;/version&gt;
        &lt;configuration&gt;
          &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</programlisting>
</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="tomee-in-docker">
<title>TomEE in Docker</title>
<section xml:id="tomee-ext-js">
<title>tomee-ext.js</title>
<simpara>packaging two WARs in TomEE in Docker</simpara>
<formalpara>
<title>Using TomEE in docker</title>
<para>
<screen>./mvnw clean package -U -T 2
docker-compose up --build

open localhost:8080/ui/
open localhost:8080/rest-api/health

docker-compose down -v</screen>
</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="glassfisg-in-docker">
<title>Glassfisg in Docker</title>
<section xml:id="glassfish-ext-js">
<title>glassfish-ext.js</title>
<simpara>packaging two WARs in glassfish in Docker</simpara>
<formalpara>
<title>Using Glassfish 5.0 in docker (alpine)</title>
<para>
<screen>./mvnw clean package -U -T 2
docker-compose up --build --force-recreate --remove-orphans
http :8080/ui/
docker-compose down -v</screen>
</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="jboss-wildfly-mvnw-gradlew-in-docker">
<title>JBoss WildFly (mvnw / gradlew) in Docker</title>
<section xml:id="forge-ws">
<title>forge-ws</title>
<formalpara>
<title>init new maven project using forge cli</title>
<para>
<screen>forge
project-new \
  --named forge-ws2 \
  --top-level-package daggerok \
  --final-name forge-ws \
  --type war</screen>
</para>
</formalpara>
<formalpara>
<title>add maven wrapper</title>
<para>
<screen>cd maven-forge-project/
mvn -N io.takari:maven:wrapper</screen>
</para>
</formalpara>
<formalpara>
<title>build</title>
<para>
<screen>./mvnw clean package -U -T 4</screen>
</para>
</formalpara>
<formalpara>
<title>docker - see docker-compose and src/main/docker/Dockerfile</title>
<para>
<screen>docker-compose up --build --force-recreate --remove-orphans
docker-compose down -v
# docker rm -f -v (docker ps -a|grep -v CONTAINER|awk '{print $1}')</screen>
</para>
</formalpara>
<formalpara>
<title>testing</title>
<para>
<screen>http :8080/app/v1/api
http :8080/app/UserService\?wsdl
curl -XPOST http://localhost:8080/app/User --header "content-type:text/xml" -d @./src/test/resources/empty-request.xml | xmllint --format -
curl -XPOST http://localhost:8080/app/User --header "content-type:text/xml" -d @src/test/resources/named-request.xml | xmllint --format -</screen>
</para>
</formalpara>
<formalpara>
<title>lombok for java 7 (maven)</title>
<para>
<screen>&lt;dependency&gt;
  &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
  &lt;artifactId&gt;lombok&lt;/artifactId&gt;
  &lt;version&gt;1.14.2&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</screen>
</para>
</formalpara>
<formalpara>
<title>lombok for java 7 (gradle)</title>
<para>
<screen>dependencies {
  compileOnly 'org.projectlombok:lombok:1.14.2'
}</screen>
</para>
</formalpara>
<simpara>links:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://docs.oracle.com/javaee/7/tutorial/jaxws001.htm#BNAYW">jax-ws oracle tutorial</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://forge.jboss.org/document/jboss-forge-2,-java-ee-easily,-so-easily">JBoss Forge 2, Java EE easily, so easily</link></simpara>
</listitem>
</orderedlist>
</section>
</chapter>
<chapter xml:id="jboss-forge-wildfly-java-ee-6-jax-ws">
<title>JBoss forge / WildFly Java EE 6 / JAX-WS</title>
<section xml:id="forge-javaee-6-ws">
<title>forge-javaee-6-ws</title>
<formalpara>
<title>up and running</title>
<para>
<screen>./mvnw clean package -U -T 2; docker-compose up --build --force-recreate --remove-orphans

http :8080/app/health
http :8080/app/AppEndpoint\?wsdl

curl -XPOST http://localhost:8080/app/AppEndpoint --header "content-type:text/xml" -d @request.xml | xmllint --format -</screen>
</para>
</formalpara>
<simpara><emphasis>MicroProfile 1.1.0 (CDI + JAX-RS + JSON-P)</emphasis></simpara>
<simpara>TODO</simpara>
<simpara><emphasis>MicroProfile 1.2 (CDI + JAX-RS + JSON-P)</emphasis></simpara>
</section>
</chapter>
<chapter xml:id="kumuluzee-microprofile-2-0-config-yaml">
<title>Kumuluzee MicroProfile 2.0 (config.yaml)</title>
<section xml:id="kumuluzee-config">
<title>kumuluzee-config</title>
<simpara><link xl:href="rpc-app/">see rpc-app module</link></simpara>
</section>
</chapter>
<chapter xml:id="kumuluzee-microprofile-2-0-jax-ws">
<title>Kumuluzee MicroProfile 2.0 (JAX-WS)</title>
<section xml:id="kumuluzee-mp-2-0-jax-ws">
<title>kumuluzee-mp-2.0-jax-ws</title>
<simpara>in progress&#8230;&#8203;</simpara>
<formalpara>
<title>up and running</title>
<para>
<screen>./mvnw clean package -U; java -jar target/*.jar

http :8000
http :8000/api/v1/ws
http :8000/api/v1/ws?WSDL

curl -XPOST http://localhost:8000/api/v1/ws --header "content-type: text/xml" -d @./request.xml  | xmllint --format -</screen>
</para>
</formalpara>
<formalpara>
<title>docker / docker-compose</title>
<para>
<screen>./mvnw
docker-compose up --force-recreate --remove-orphans

http :8000
http :8000/api/v1/ws
http :8000/api/v1/ws?WSDL

curl -XPOST http://localhost:8000/api/v1/ws --header "content-type: text/xml" -d @./request.xml  | xmllint --format -

docker-compose down -v</screen>
</para>
</formalpara>
</section>
</chapter>
<chapter xml:id="todo">
<title>TODO</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://www.youtube.com/watch?v=gwEciQ8vMjo">JBoss / JMS / MDB</link></simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter xml:id="links">
<title>links</title>
<orderedlist numeration="arabic">
<listitem>
<simpara><link xl:href="https://javaee.github.io/tutorial/toc.html">Java Platform, Enterprise Edition (Java EE) 8 The Java EE Tutorial</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://javaee.github.io/firstcup/toc.html">Java Platform, Enterprise Edition (Java EE) 8 Your First Cup: An Introduction to the Java EE Platform</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/kumuluz/kumuluzee-reactive">Reactive JavaEE (Vert.x / KumuluzEE)</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://ee.kumuluz.com/tutorial/">KumuluzEE tutorials</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/kumuluz/kumuluzee-samples">KumuluzEE samples</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www.slideshare.net/AnatoleTresch/configuration-beyond-java-ee-8">Configuration beyond Java EE 8</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.oracle.com/technetwork/articles/java/unittesting-455385.html">Unit Testing for Java EE</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://www.oracle.com/technetwork/articles/java/intondemand-1444614.html">Interfaces on Demand with CDI and EJB 3.1</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://docs.oracle.com/javaee/6/tutorial/doc/bnaph.html">The Java EE 6 Tutorial</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://asciidoctor.org/docs/user-manual/#builtin-attributes">Asciidoctor attributes</link></simpara>
</listitem>
</orderedlist>
</chapter>
<chapter xml:id="enjoy">
<title>Enjoy! :)</title>

</chapter>
</book>