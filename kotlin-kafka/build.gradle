buildscript {
  ext {
    javaVersion = "1.8"
    javaeeVersion = "8.0"
    vavrVersion = "0.10.2"
    slf4jVersion = "1.7.30"
    kotlinVersion = "1.2.21"
    lombokVersion = "1.18.12"
    junitJupiterVersion = "5.6.2"
    wildflySwarmVersion = "2018.5.0"
    hibernateCoreVersion = "4.2.18.Final"
  }
  repositories {
    // mavenLocal()
    mavenCentral()
    maven { url = "https://maven.repository.redhat.com/ga/" }
    maven { url = "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/" }
  }
  dependencies {
    classpath("org.wildfly.swarm:wildfly-swarm-gradle-plugin:$wildflySwarmVersion")
    classpath("io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE")
  }
}

plugins {
//  id "ear"
  id "war"
  id "idea"
  id "maven"
  id "eclipse"
  id "org.jetbrains.kotlin.jvm" version "1.2.21"
  id "org.jetbrains.kotlin.plugin.noarg" version "1.2.21"
  id "org.jetbrains.kotlin.plugin.allopen" version "1.2.21"
  id "com.avast.gradle.docker-compose" version "0.6.13"
}

apply plugin: "wildfly-swarm"
apply plugin: "io.spring.dependency-management"

group = "daggerok"
version = "0.0.1"
sourceCompatibility = targetCompatibility = "$javaVersion"

compileKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

compileTestKotlin {
  incremental = true
  kotlinOptions {
    freeCompilerArgs = ["-Xjsr305=strict"]
    jvmTarget = "$javaVersion"
  }
}

allOpen {
  annotation("javax.ws.rs.Path")
  annotation("javax.ejb.Startup")
  annotation("javax.ejb.Stateless")
  annotation("javax.ejb.Singleton")
  annotation("javax.inject.Singleton")
  annotation("javax.persistence.Entity")
  annotation("javax.enterprise.context.ApplicationScoped")
}

noArg {
  annotation("javax.ws.rs.Path")
  annotation("javax.ejb.Startup")
  annotation("javax.ejb.Stateless")
  annotation("javax.ejb.Singleton")
  annotation("javax.inject.Singleton")
  annotation("javax.persistence.Entity")
  annotation("javax.enterprise.context.ApplicationScoped")
}

war {
  archiveName = "${project.name}.war"
}

defaultTasks "clean", "build"

repositories {
  // mavenLocal()
  mavenCentral()
  maven { url = "https://maven.repository.redhat.com/ga/" }
  maven { url = "https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/" }
}

dependencies {
  compile("org.apache.kafka:kafka-clients:1.0.0")

  compile("org.wildfly.swarm:microprofile")
  compile("org.wildfly.swarm:jaxrs-jsonp")
  compile("org.wildfly.swarm:logging")
  compile("org.wildfly.swarm:ejb")
  testCompile("org.wildfly.swarm:arquillian")

  //compile("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
  compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

  providedCompile "javax:javaee-api:$javaeeVersion"
  providedCompile "com.h2database:h2:1.4.196"

  compile "org.hibernate:hibernate-core:$hibernateCoreVersion"
  compile "javax.json:javax.json-api:1.0"
  compile "org.glassfish:javax.json:1.0.4"
  compile "org.jboss.resteasy:resteasy-json-p-provider:3.0.7.Final"

  compile "org.slf4j:slf4j-api:$slf4jVersion"
  compile "org.slf4j:slf4j-jdk14:$slf4jVersion"

  compile "io.vavr:vavr:$vavrVersion"
  compileOnly "org.projectlombok:lombok:$lombokVersion"

  testCompile "junit:junit:4.13"
  testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
  testImplementation("org.hamcrest:hamcrest-core:1.3")
  testRuntime("org.junit.vintage:junit-vintage-engine:$junitJupiterVersion")
  testCompileOnly("org.projectlombok:lombok:$lombokVersion")
}

dependencyManagement {
  imports {
    mavenBom "org.wildfly.swarm:bom:$wildflySwarmVersion"
  }
}

swarm {
  executable = true
}

dockerCompose {
  useComposeFiles = [project.file("docker-compose-gradle.yaml")]
  // captureContainersOutput = true
  captureContainersOutput = false
  stopContainers = true
  removeContainers = true
  removeImages = "Local"
  removeVolumes = true
  removeOrphans = true
  forceRecreate = true
  waitForTcpPorts = false
  projectName = project.name
}

composeUp.dependsOn assemble

task wrapper(type: Wrapper) {
  gradleVersion = "4.10.3"
  distributionType = "ALL"
}

test {
  systemProperties "property": "value"
}
